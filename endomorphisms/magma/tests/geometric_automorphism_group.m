printf "Testing GeometricAutomorphismGroupViaPeriods";

R<x> := PolynomialRing(Rationals());
// GL(2,3)
eqns := [
<"GL(2,3)", [[0, -1, 0, 0, 0, 1], []]>,
<"GL(2,3)", [[-2, -8, -10, -5, 0, 1], [0, 0, 0, 1]]>,
<"GL(2,3)", [[0, 1, 0, 0, 0, 1], []]>,
// C3:D4
<"C3:D4", [[0, 0, 0, 0, 0, 0, 1], [1]]>,
<"C3:D4", [[0, 0, 0, 0, 0, 0, -1], [1]]>,
<"C3:D4", [[-2], [0, 0, 0, 1]]>,
<"C3:D4", [[2], [0, 0, 0, 1]]>,
// D6
<"D6", [[3, 0, 0, 1], [1, 0, 0, 1]]>,
<"D6", [[0, 1, 5, 5, 1], [1, 1, 0, 1]]>,
<"D6", [[3, 0, 0, 1], [0, 0, 0, 1]]>,
// C10
<"C10", [[0, 0, 0, 0, 0, 1], [1]]>,
<"C10", [[1, 0, 0, 0, 0, 1], []]>,
<"C10", [[0, 0, 0, 0, 0, 2], [1]]>,
<"C10", [[-1, 0, 0, 0, 0, 1], [1]]>,
<"C10", [[-1, 0, 0, 0, 0, 1], []]>,
//D4
<"D4", [[0, 1, 0, 4, 0, 1], []]>,
<"D4", [[0, -1, 0, -3, 0, 1], []]>,
<"D4", [[-1, 0, 5, 0, -10, 0, 6], [1]]>,
<"D4", [[-1, 0, -5, 0, -10, 0, -6], [1]]>,
//V4
<"V4", [[-1, 3, 1, -7, 0, 4], [0, 0, 0, 1]]>,
<"V4", [[1, 3, -1, -7, -4], [0, 0, 0, 1]]>,
<"V4", [[-1, -3, -7, -9, -4], [0, 0, 0, 1]]>,
<"V4", [[2, 0, 4, 0, 3, 0, 1], [0, 1, 0, 1]]>,
<"V4", [[4, -6, 17, -12, 34, -24, 34], [1]]>,
//C2
<"C2", [[0, -1, 0, 1, -3, 1], [1, 1, 1]]>,
<"C2", [[0, -1, 0, 0, -1, 1], [1, 1, 1]]>,
<"C2", [[0, 2, -2, -4, 0, 1], [1, 0, 0, 1]]>,
<"C2", [[-1, 1, -2, 1, -1], [1, 1, 0, 1]]>,
<"C2", [[0, -1, 1, 0, 0, -1], [1, 0, 0, 1]]>
];

for Gfg in eqns do
  printf ".";
  Gname, fg := Explode(Gfg);
  f, g := Explode(fg);
  C := HyperellipticCurve(R!f, R!g);
  // this makes several checks internally
  G := GeometricAutomorphismGroupViaPeriods(C);
  assert Gname eq GroupName(G);
end for;

