prec := 100;
F := RationalsExtra(prec);
R<x> := PolynomialRing(F);

coeffs := [
[[0,-1,0,0,0,1],[]],
[[-2,-8,-10,-5,0,1],[0,0,0,1]],
[[-2],[0,0,0,1]],
[[0,0,0,0,0,0,1],[1]],
[[0,0,0,0,0,0,-1],[1]],
[[1,3,6,7,6,3,1],[0,1,1]],
[[0,-1,0,-1],[1,1,1,1]],
[[0,0,1,2,2,1],[1,1,0,1]],
[[0,-1,1,1,-3,2],[1]],
[[0,0,0,0,1,1],[1,1,0,1]],
[[-1,0,2,0,-2,0,1],[]],
[[0,-4,6,0,-3,1],[]],
[[-1],[1,0,0,1]],
[[0,-1,1,0,-1,1],[]],
[[1,0,0,1],[1,0,0,1]],
[[-7,0,0,0,1],[0,1,0,1]],
[[0,0,1,0,1],[1,0,0,1]],
[[1,1,2,1,1],[1,1,1,1]],
[[17,0,-3,0,5,0,1,0,1],[]],
[[-8,12,8,-8,-8,0,1],[]],
[[7235200,1400720,-397152,-77175,2184,966,56,1],[]],
[[10,-24,23,-48,35,0,35,48,23,24,10],[]]
];
//curves := [HyperellipticCurve(R!elt[1], R!elt[2]) : elt in coeffs];

// [Dimension(A) where _, A := HeuristicEndomorphismAlgebra(C : CC:=true) : C in curves];
dimensions := [8, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 2, 2, 4, 3, 4];

// [HeuristicEndomorphismLattice(C) : C in curves]
lattices := [
  <[<2,2>],<4,2>,[<<1,1>,[1,0,0,0,1],[<2,2>],[<2,2,[2,0,1],1,1>],<1,-1>,4>,<<2,1>,[1,0,1],[<1,4>],[<1,4,[-1,1],-2,2>],<1,1>,1>,<<2,1>,[2,0,1],[<1,2>,<1,2>],[<1,4,[1,0,0,0,1],1,2>],<1,-1>,2>,<<2,1>,[-2,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<4,2>,[-1,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>]>,
<[<2,2>],<8,2>,[<<1,1>,[16,0,-8,0,4,0,-2,0,1],[<2,2>],[<2,2,[2,0,1],1,1>],<1,-1>,4>,<<2,1>,[4,0,6,0,1],[<1,2>,<1,2>],[<1,4,[1,0,0,0,1],1,2>],<1,-1>,2>,<<2,1>,[1,-1,1,-1,1],[<1,4>],[<1,4,[-1,1],-2,2>],<1,1>,1>,<<2,1>,[20,0,-10,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<4,2>,[-1,-1,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>,<<4,1>,[10,0,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>,<<4,1>,[2,0,1],[<1,2>,<1,2>],[<1,4,[1,0,0,0,1],1,2>],<1,-1>,2>,<<8,2>,[-1,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>]>,
<[<2,2>],<4,2>,[<<1,1>,[4,0,-2,0,1],[<2,2>],[<2,2,[1,-1,1],1,1>],<16,-1>,4>,<<2,1>,[1,-1,1],[<1,2>,<1,2>],[<1,2,[1,-1,1],1,1>,<1,2,[1,-1,1],1,1>],<4,-1>,2>,<<2,1>,[2,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<2,1>,[-6,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<12,0>,3>,<<4,2>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>]>,
<[<2,2>],<6,1>,[<<1,1>,[1,-3,0,5,0,-3,1],[<2,2>],[<2,2,[1,-1,1],1,1>],<16,-1>,4>,<<2,1>,[-2,0,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<3,1>,[1,-1,1],[<1,2>,<1,2>],[<1,2,[1,-1,1],1,1>,<1,2,[1,-1,1],1,1>],<4,-1>,2>,<<6,1>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>]>,
<[<2,2>],<12,4>,[<<1,1>,[1,6,21,50,78,78,47,12,-6,-8,-3,0,1],[<2,2>],[<2,2,[1,-1,1],1,1>],<16,-1>,4>,<<2,1>,[1,-3,0,5,0,-3,1],[<1,2>,<1,2>],[<1,2,[1,-1,1],1,1>,<1,2,[1,-1,1],1,1>],<4,-1>,2>,<<2,1>,[1,6,3,-2,-3,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<12,0>,3>,<<2,1>,[2,0,0,-2,0,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<3,1>,[1,0,-1,0,1],[<1,2>,<1,2>],[<1,2,[1,-1,1],1,1>,<1,2,[1,-1,1],1,1>],<4,-1>,2>,<<4,2>,[-2,0,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<6,1>,[1,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<6,1>,[-3,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<6,2>,[1,-1,1],[<1,2>,<1,2>],[<1,2,[1,-1,1],1,1>,<1,2,[1,-1,1],1,1>],<4,-1>,2>,<<12,4>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>]>,
<[<2,1>],<1,1>,[<<1,1>,[-1,1],[<2,1>],[<2,1,[-1,1],1,1>],<3,1>,3>]>,
<[<2,1>],<2,1>,[<<1,1>,[-2,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<2,1>,[-1,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<3,1>,[<<1,1>,[-1,-3,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<3,1>,3>,<<3,1>,[-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<4,1>,[<<1,1>,[2,0,-4,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<2,1>,[-2,0,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>,<<4,1>,[-1,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<6,2>,[<<1,1>,[-1,-3,6,4,-5,-1,1],[<2,1>],[<2,1,[-1,1],1,1>],<3,1>,3>,<<2,1>,[-1,-4,-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>,<<3,1>,[-3,-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>,<<6,2>,[-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<2,1>,[<<1,1>,[1,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<2,1>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>]>,
<[<2,1>],<4,2>,[<<1,1>,[1,0,0,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<2,1>,[1,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<2,1>,[2,0,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>,<<2,1>,[-2,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<4,2>,[-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<6,1>,[<<1,1>,[3,0,0,0,0,0,1],[<2,1>],[<2,1,[-1,1],1,1>],<3,1>,3>,<<2,1>,[-3,0,0,1],[<1,1>,<1,1>],[<1,2,[-3,0,1],1,2>],<1,-1>,2>,<<3,1>,[1,-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>,<<6,1>,[-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<8,3>,[<<1,1>,[1,-4,8,-10,7,-2,2,-2,1],[<2,1>],[<2,1,[-1,1],1,1>],<4,0>,3>,<<2,1>,[1,0,-1,0,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>,<<2,1>,[3,0,-3,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<2,1>,[1,-2,0,-2,1],[<1,1>,<1,1>],[<1,2,[-2,0,1],1,2>],<1,-1>,2>,<<4,2>,[1,-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>,<<4,1>,[1,0,1],[<1,2>],[<1,2,[1,0,1],1,2>],<1,-1>,1>,<<4,2>,[-3,0,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>,<<8,3>,[-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>]>,
<[<2,1>],<12,4>,[<<1,1>,[4,-42,177,-400,585,-642,551,-366,195,-80,27,-6,1],[<2,1>],[<2,1,[-1,1],1,1>],<3,1>,3>,<<2,1>,[36,-18,-9,3,6,-3,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>,<<2,1>,[-5,0,0,0,0,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<2,1>,[4,12,15,-5,0,-3,1],[<1,1>,<1,1>],[<1,2,[-3,0,1],1,2>],<1,-1>,2>,<<3,1>,[1,1,2,-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>,<<4,2>,[-5,0,0,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>,<<6,2>,[1,-1,1],[<1,2>],[<1,2,[1,-1,1],1,2>],<1,-1>,1>,<<6,1>,[-1,-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>,<<6,1>,[4,-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>,<<12,4>,[-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>]>,
<[<1,1>,<1,2>],<2,1>,[<<1,1>,[1,0,1],[<1,1>,<1,2>],[<1,1,[-1,1],1,1>,<1,2,[1,0,1],1,1>],<8,-1>,2>,<<2,1>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>]>,
<[<1,1>,<1,1>],<1,1>,[<<1,1>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>]>,
<[<1,1>,<1,1>],<2,1>,[<<1,1>,[-2,0,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,1>],<2,-1>,2>,<<2,1>,[-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>]>,
<[<1,1>,<1,1>],<1,1>,[<<1,1>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,2>],<2,-1>,2>]>,
<[<1,2>,<1,2>],<4,1>,[<<1,1>,[3,4,2,-1,1],[<1,2>,<1,2>],[<1,4,[3,4,2,-1,1],1,2>],<1,-1>,2>,<<2,1>,[-3,-1,1],[<1,1>,<1,1>],[<1,2,[-3,-1,1],1,2>],<1,-1>,2>,<<4,1>,[-1,1],[<1,1>],[<1,1,[-1,1],1,2>],<1,-1>,1>]>,
<[<1,1>,<1,1>,<1,1>],<2,1>,[<<1,1>,[-3,0,1],[<1,1>,<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,2,[-3,0,1],1,2>],<3,-1>,3>,<<2,1>,[-1,1],[<1,1>,<1,1>],[<1,1,[-1,1],1,1>,<1,1,[-1,1],1,2>],<3,-1>,2>]>,
<[<2,1>],<1,1>,[<<1,1>,[-1,1],[<2,1>],[<2,1,[-1,1],1,2>],<36,0>,3>]>
];


// [<Eltseq(DefiningPolynomial(elt[1])), <Eltseq(DefiningPolynomial(elt[2,1])),elt[2,2]>, elt[3,1], elt[4,1], elt[4,3]> where elt := HeuristicDecomposition(C) : C in curves]
decompositions := [<[-1,1],<[-2,0,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[20,0,-10,0,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[-1,1],true>,[[1,1],[1,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[1,1],[1,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[1,1],[1,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[1,2]],[[1,2]],[[1]]>,
<[-1,1],<[-2,0,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[-1,-3,0,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[2,0,-4,0,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[-1,-3,6,4,-5,-1,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[-1,1],true>,[[1,1],[1,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[1,0,1],false>,[[2,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[3,0,0,0,0,0,1],true>,[[2,1]],[[1,2]],[]>,
<[-1,1],<[3,0,-3,0,1],false>,[[2,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-5,0,0,0,0,0,1],false>,[[2,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[1,1],[1,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[1,1],[1,1]],[[1,1],[1,1]],[[1],[2]]>,
<[-2,0,1],<[-2,0,1],true>,[[2,1]],[[1,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[2,1],[1,1]],[[2,1],[1,1]],[[1],[2]]>,
<[-1,1],<[3,4,2,-1,1],true>,[[2,1]],[[2,1]],[]>,
<[-1,1],<[-1,1],true>,[[2,1],[1,1]],[[2,1],[1,1]],[]>,
<[-1,1],<[-1,1],true>,[[2,2]],[[2,2]],[[1]]>]
];


for i->elt in coeffs do
  printf ".";
  C := HyperellipticCurve(R!elt[1], R!elt[2]);
  _, A := HeuristicEndomorphismAlgebra(C : CC:=true);
  assert Dimension(A) eq dimensions[i];
  assert HeuristicEndomorphismLattice(C) eq lattices[i];
  elt := HeuristicDecomposition(C);
  assert <Eltseq(DefiningPolynomial(elt[1])), <Eltseq(DefiningPolynomial(elt[2,1])),elt[2,2]>, elt[3,1], elt[4,1], elt[4,3]> eq decompositions[i];
end for;
